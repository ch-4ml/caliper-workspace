test:
  name: fixed-asset-benchmark
  description: A test benchmark
  workers:
    type: local
    number: 1
  rounds:
    - label: create-asset
      description: A round to generate assets in a pure way
      txNumber: 1000
      rateControl:
        type: maximum-rate
        opts:
          tps: 50
          step: 5
          sampleInterval: 2000
          includeFailed: false
      workload:
        module: workload/create-asset.js
        arguments:
          contractId: fixed-asset
          byteSize: BYTE_SIZE
          keyCount: KEY_COUNT

    - label: batch-create-asset
      description: A round to generate assets using batch scheduling
      txNumber: TX_NUMBER_FOR_BATCH
      rateControl:
        type: maximum-rate
        opts:
          tps: 50
          step: 5
          sampleInterval: 2000
          includeFailed: false
      workload:
        module: workload/batch-create-asset.js
        arguments:
          contractId: fixed-asset
          byteSize: BYTE_SIZE
          batchSize: BATCH_SIZE
          keyCount: KEY_COUNT

    - label: batch-create-asset-limit-keys
      description: A round to limit the number of keys and generate assets using batch scheduling
      txNumber: TX_NUMBER_FOR_BATCH
      rateControl:
        type: maximum-rate
        opts:
          tps: 50
          step: 5
          sampleInterval: 2000
          includeFailed: false
      workload:
        module: workload/batch-create-asset-limit-keys.js
        arguments:
          contractId: fixed-asset
          byteSize: BYTE_SIZE
          batchSize: BATCH_SIZE
          keyCount: KEY_COUNT

    # - label: query-history-of-batch-create-asset-limit-keys
    #   description: Round to get history for uuid
    #   txNumber: 5
    #   rateControl:
    #     type: maximum-rate
    #     opts:
    #       tps: 10
    #   workload:
    #     module: workload/query-history-of-batch-create-asset-limit-keys.js
    #     arguments:
    #       contractId: fixed-asset
    #       byteSize: 1000
    #       batchSize: 100
    #       keyCount: 10
# monitors:
#   type:
#     - docker:
#     # - process:
#     - prometheus:

#   docker:
#     containers:
#       - all

#   prometheus:
#     url: 'http://localhost:9090'
#     push_url: 'http://localhost:9091'
#   metrics:
#     ignore: [prometheus, pushGateway, cadvisor, grafana, node-exporter]
#     include:
#       Endorse Time (s):
#         query: rate(endorser_propsal_duration_sum{chaincode="marbles:v0"}[5m])/rate(endorser_propsal_duration_count{chaincode="marbles:v0"}[5m])
#         step: 1
#         label: instance
#         statistic: avg
#       Max Memory (MB):
#         query: sum(container_memory_rss{name=~".+"}) by (name)
#         step: 10
#         label: name
#         statistic: max
#         multiplier: 0.000001
#       Avg Memory (MB):
#         query: 'sum(container_memory_rss{name=~".+"}) by (name)'
#         step: 10
#         label: name
#         statistic: avg
#         multiplier: 0.000001
#       CPU (%):
#         query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
#         step: 10
#         label: name
#         statistic: avg
#         multiplier: 100
#       Network In (MB):
#         query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
#         step: 10
#         label: name
#         statistic: sum
#         multiplier: 0.000001
#       Network Out (MB):
#         query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
#         step: 10
#         label: name
#         statistic: sum
#         multiplier: 0.000001
#       Disc Write (MB):
#         query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
#         step: 10
#         label: name
#         statistic: sum
#         multiplier: 0.000001
#       Disc Read (MB):
#         query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
#         step: 10
#         label: name
#         statistic: sum
#         multiplier: 0.000001

# observer:
#   type: prometheus
#   interval: 5
